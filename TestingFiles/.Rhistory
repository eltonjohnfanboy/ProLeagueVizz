feminisub <- starwars %>% select("name", "gender") %>% filter(gender == "femenine")
femenins
femeninsub
feminisub
library(tidyverse)
library(dplyr)
### Exercici 1
df_ex1 = select(starwars, c("name", "gender"))
### Exercici 2
df_humans = filter(starwars, species == "Human")
df_no_humans = filter(starwars, species != "Human")
### Exercici 3
#a
dadesub = select(starwars, c(name, gender))
feminins <- dadesub %>% filter(gender == "feminine")
#b
feminisub <- starwars %>% select(name, gender) %>% filter(gender == "feminine")
feminins == feminisub
feminisub
### Exercici 4
feminisub %>% arrange("name")
### Exercici 4
feminisub %>% arrange(name)
# Sense utilitzar la variable
ord_fem2 <- starwars %>% select(name, gender) %>% filter(gender == "feminine") %>% arrange(name)
ord_fem2
### Exercici 5
#a
group_genere <- starwars %>% group_by(gender)
group_genere
### Exercici 5
#a
group_genere <- starwars %>% group_by(gender)
### Exercici 5
#a
group_genere <- starwars %>% group_by(gender) %>% summarize()
group_genere
### Exercici 5
#a
starwars %>% group_by(gender) %>% summarize()
### Exercici 5
#a
starwars %>% group_by(gender) %>% count()
#b
starwars %>% group_by(gender) %>% count()
### Exercici 6
starwars %>% mutate(gender/mean(gender)) %>% select(c("name", "hieghr", "species"))
### Exercici 6
starwars %>% mutate(height/mean(height)) %>% select(c("name", "hieghr", "species"))
### Exercici 6
starwars %>% mutate(height/mean(height)) %>% select(c("name", "hieght", "species"))
### Exercici 6
starwars %>% mutate(height/mean(height)) %>% select(c("name", "height", "species"))
### Exercici 6
starwars %>% mutate(height_norm <- height/mean(height)) %>% select(c("name", "height", "species", "height_norm"))
### Exercici 6
starwars %>% mutate(height/mean(height))
### Exercici 6
starwars %>% mutate(a = height/mean(height))
### Exercici 6
starwars %>% mutate(a = height/mean(height)) %>% select(c("name", "height", "species", "height_norm", "a"))
### Exercici 6
starwars %>% mutate(a = height/mean(height)) %>% select(c("name", "height", "species", "a"))
### Exercici 6
starwars %>% mutate(h_norm = height/mean(height)) %>% select(c(name, height, species, h_norm))
starwars %>% mean(height)
### Exercici 6
starwars %>% mutate(h_norm = height/mean(height, na.rm=TRUE)) %>% select(c(name, height, species, h_norm))
### Exercici 7
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% count()
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% mean(height)
starwars %>% filter(gender == "masculine") %>% group_by(species)
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% count()
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% mean(height)
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% mean(height, na.rm=TRUE)
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% mean(height, na.rm=TRUE)
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% mean()
### Exercici 7
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% count()
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% mean(height, na.rm=TRUE)
starwars %>% filter(gender == "masculine") %>% group_by(species) %>% summarize(mean(height, na.rm=TRUE))
#### PART 2
ggplot(starwars) + aes(height, weight) + geom_bar()
#### PART 2
ggplot(starwars) + aes(height, weight) + geom_bar()
glimpse(starwars)
#### PART 2
ggplot(starwars) + aes(x = height, y = mass) + geom_bar()
#### PART 2
ggplot(starwars, aes(x = height, y = mass)) + geom_bar()
#### PART 2
ggplot(starwars) + aes(x = height, y = mass) + geom_point()
#### PART 2
ggplot(starwars) + aes(x = height, y = mass, na.rm = FALSE) + geom_point()
#### PART 2
ggplot(starwars) + aes(x = height, y = mass) + geom_point(na.rm = FALSE)
#### PART 2
ggplot(starwars) + aes(x = height, y = mass) + geom_point(na.rm = FALSE)
ggplot(starwars) + aes(x = height, y = mass, fill = factor(gender)) + geom_point(na.rm = FALSE)
ggplot(starwars) + aes(x = height, y = mass, color = factor(gender)) + geom_point(na.rm = FALSE)
#### PART 2
ggplot(starwars) + aes(x = height, y = mass) + geom_point(na.rm = FALSE)
ggplot(starwars) + aes(x = height, y = mass, color = factor(gender)) + geom_point(na.rm = FALSE)
starwars %>% filter(mass > 1000) %>% ggplot(starwars) + aes(x = height, y = mass, color = factor(gender)) + geom_point(na.rm = FALSE)
starwars %>% filter(mass > 1000) %>% ggplot(.) + aes(x = height, y = mass, color = factor(gender)) + geom_point(na.rm = FALSE)
starwars %>% filter(mass < 1000) %>% ggplot(.) + aes(x = height, y = mass, color = factor(gender)) + geom_point(na.rm = FALSE)
set.seed()
set.seed(17)
library(tidyverse)
library(dplyr)
install.packages("devtools")
install.packages("devtools")
install.packages(“factoextra")
library("devtools")
install.packages(“factoextra")
install.packages("factoextra")
library("devtools")
library("devtools")
library("factoextra")
# Per fer el PCA
iris_pca<-prcomp(iris[,-5], center=TRUE, scale.=TRUE)
View(iris_pca)
View(iris_pca)
iris_pca
summary(iris_pca)
summary(iris_pca)
fviz_pca_ind(iris_pca, geom="point")
fviz_pca_ind(iris_pca, label="none", habillage=iris$Species)
fviz_pca_ind(iris_pca, label="none", habillage=iris$Species) # afegeix color i forma per cada espècie
fviz_pca_ind(iris_pca, label="none",
habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95) # afegir el.lipses
install.packages("treemapify")
Proglangs <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/proglanguages.csv")
View(Proglangs)
View(Proglangs)
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap()
library(treemapify)
Proglangs <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/proglanguages.csv")
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap()
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border()
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + +geom_treemap_subgroup_text(color='white')
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() +geom_treemap_subgroup_text(color='white')
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + geom_treemap_subgroup_text(color="white",place="left") + geom_treemap_text (aes(label=id))
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + geom_treemap_subgroup_text(color="white",place="left") + geom_treemap_text (aes(label=id))
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + geom_treemap_subgroup_text(color="white",place="left") + geom_treemap_text (aes(label=id))
new2
mtxars
mtcars
glimpse(mtcars)
### PART 1
### Exercici 1
aux = mtcars
View(aux)
View(aux)
mtcars(c("mpg", "disp", "hp", "dart", "wt", "qsec"))
aux(c("mpg", "disp", "hp", "dart", "wt", "qsec"))
aux
aux("mpg", "disp", "hp", "dart", "wt", "qsec")
mtcars("mpg", "disp", "hp", "dart", "wt", "qsec")
aux("mpg", "disp", "hp", "dart", "wt", "qsec")
mtcars
as_tibble(mtcars)
library(devtools)
library(factoextra)
library(tidyverse)
library(dplyr)
library(forcats)
library(ggcorrplot)
as_tibble(mtcars)
aux("mpg", "disp", "hp", "dart", "wt", "qsec")
mtcars("mpg", "disp", "hp", "dart", "wt", "qsec")
as_tibble(mtcars)
as_tibble(mtcars)[c("mpg", "disp", "hp", "dart", "wt", "qsec")]
View(aux)
as_tibble(mtcars)[c("mpg", "disp", "hp", "drat", "wt", "qsec")]
as_tibble(mtcars)[c("mpg", "disp", "hp", "drat", "wt", "qsec", "cyl", "gear", "carb")]
#a
new_2 = as_tibble(mtcars)[c("mpg", "disp", "hp", "drat", "wt", "qsec", "cyl", "gear", "carb")]
#b
mtcars_pca = prcomp(new_2, center=TRUE, scale.=TRUE)
summary(mtcars_pca)
#b
mtcars_pca = prcomp(new_2, center=TRUE, scale.=TRUE)
install.packages (c("devtools", "stringr"))
install.packages (c ("maps", "mapdata","ggmap"))
install.packages("ozmaps")
devtools::install_github("mdsumner/ozmaps")
install.packages("sf")
install.packages("rmapshaper")
install.packages("rmapshaper")
install.packages("rmapshaper")
install.packages("rmapshaper")
usa <- mapdata("usa")
ggplot(usa) + aes(long, lat) + geom_point()
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
usa <- mapdata("usa")
install.packages (c("devtools", "stringr"))
install.packages (c("devtools", "stringr"))
install.packages(c("devtools", "stringr"))
install.packages (c ("maps", "mapdata","ggmap"))
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
usa <- mapdata("usa")
library(ggplot2)
library(ggmap)
library(mapdata)
usa <- mapdata(usa)
usa <- map_data(usa)
usa <- map_data("usa")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat) + geom_point()
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group) + geom_point() + coord_quickmap()
usa <- map_data("japan")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat, group = group) + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
usa <- map("japan")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
usa <- map_data("nz")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill  = "white") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, colour  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white", colour  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white", colours  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white", colour  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white") + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "red") + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat) + geom_point(fill = "red", colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "blue") + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "blue") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "blue", group = group) + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group) + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
###2
states <- map_data("states")
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
usa <- map_data("usa")
theme_set(theme_bw())
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region) + geom_polygon() + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
View(states)
View(states)
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap() + guides(fill = "none")
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon(colous = "white") + coord_quickmap() + guides(fill = "none")
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon(colour = "white") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "blue") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group) + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
View(fo_df)
View(fo_df)
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "blue") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
library(shiny)
ui <- fluidPage(
titlePanel("Accordion Example"),
# Wrap your accordion content inside the accordion function
shiny::accordion(
# Section 1
section(
"Section 1",
fluidRow(
# Add your content for Section 1 here
column(width = 6, plotOutput("plot1")),
column(width = 6, tableOutput("table1"))
)
),
# Section 2
section(
"Section 2",
fluidRow(
# Add your content for Section 2 here
column(width = 6, plotOutput("plot2")),
column(width = 6, tableOutput("table2"))
)
)
)
)
server <- function(input, output) {
# Define your server logic here (plotting, data processing, etc.)
output$plot1 <- renderPlot({
# Render the plot for Section 1
# ...
})
output$table1 <- renderTable({
# Render the table for Section 1
# ...
})
output$plot2 <- renderPlot({
# Render the plot for Section 2
# ...
})
output$table2 <- renderTable({
# Render the table for Section 2
# ...
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Accordion Example"),
# Wrap your accordion content inside the accordion function
shiny::accordion(
# Section 1
section(
"Section 1",
fluidRow(
# Add your content for Section 1 here
column(width = 6, plotOutput("plot1")),
column(width = 6, tableOutput("table1"))
)
),
# Section 2
section(
"Section 2",
fluidRow(
# Add your content for Section 2 here
column(width = 6, plotOutput("plot2")),
column(width = 6, tableOutput("table2"))
)
)
)
)
install.packages("shinyjs")
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
titlePanel("Expand and Collapse Example"),
actionButton("toggle_btn", "Toggle Content"),
div(
id = "expand_content",
style = "display: none;",
p("This is the hidden content that will be expanded when you click the button.")
)
)
server <- function(input, output) {
observeEvent(input$toggle_btn, {
toggle("expand_content")
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$style(HTML("
.expand-content {
max-height: 0;
transition: max-height 0.5s ease-out;
overflow: hidden;
}
.expanded {
max-height: 400px; /* Adjust this value to control the size of the expanded content */
}
"))
),
titlePanel("Expand and Collapse Example"),
actionButton("toggle_btn", "Toggle Content"),
div(
class = "expand-content",
id = "expand_content",
p("This is the hidden content that will be expanded when you click the button.")
)
)
server <- function(input, output) {
observeEvent(input$toggle_btn, {
runjs("$('.expand-content').toggleClass('expanded');")
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$style(HTML("
.expand-content {
max-height: 0;
overflow: hidden;
transition: max-height 0.5s ease-out;
}
.expanded {
max-height: 500px; /* Adjust this value to control the size of the expanded content */
margin: 20px 0;
}
#expand_wrapper {
display: flex;
align-items: center;
justify-content: center;
height: 100vh;
}
#expand_button {
background-color: #007BFF;
color: white;
border: none;
padding: 10px 20px;
border-radius: 5px;
font-size: 18px;
cursor: pointer;
outline: none;
}
"))
),
div(
id = "expand_wrapper",
div(
id = "expand_button",
"Click to Expand"
),
div(
class = "expand-content",
id = "expand_content",
p("This is the hidden content that will be expanded when you click the button.")
)
)
)
server <- function(input, output) {
observeEvent(input$expand_button, {
runjs("$('.expand-content').toggleClass('expanded');")
})
}
shinyApp(ui, server)
library(shiny); runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/textAux.R')
highlighted_ndoes
highlighted_nodes
ifelse(highlighted_nodes %in% c(1,2), "SI", "NO")
exit
exit
exit()
browser()
library(shiny); runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
library(shiny); runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
