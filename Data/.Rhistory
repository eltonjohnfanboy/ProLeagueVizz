ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
usa <- map_data("usa")
theme_set(theme_bw())
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region) + geom_polygon() + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
View(states)
View(states)
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap() + guides(fill = "none")
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon(colous = "white") + coord_quickmap() + guides(fill = "none")
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon(colour = "white") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "blue") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group) + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
View(fo_df)
View(fo_df)
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "blue") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
getwd()
setwd("C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/Data")
ls
player_data <- read_csv("PlayerStatesTrajectory.csv")
library(tidyverse)
player_data <- read_csv("PlayerStatesTrajectory.csv")
View(player_data)
View(player_data)
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App_v1/app_v1.R')
getwd()
# Read libraries
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
# Read data
player_data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player))
),
mainPanel(
tableOutput("player_table")
)
)
)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderTable({
selected_player() %>% select(Player, Year, Team)
})
}
# Run the Shiny app
shinyApp(ui, server)
# UI function
ui <- fluidPage(
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player))
),
mainPanel(
tableOutput("player_table")
)
)
)
# Read data
data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player))
),
mainPanel(
tableOutput("player_table")
)
)
)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderTable({
selected_player() %>% select(Player, Year, Team)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Read libraries
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
library(DT)
# Read data
data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player),
width = "100%")  # Set the width of the dropdown to 100%
),
mainPanel(
tableOutput("player_table")
)
)
)
library(shinythemes)
library(shinythemes::shinytheme())
library(shinythemes)
# Read data
data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player),
width = "100%")  # Set the width of the dropdown to 100%
),
mainPanel(
tableOutput("player_table")
)
)
)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderTable({
selected_player() %>% select(Player, Year, Team) %>%
datatable(
options = list(
paging = FALSE,  # Disable pagination
searching = FALSE,  # Disable searching
info = FALSE,  # Disable information display
columnDefs = list(list(className = "dt-center", targets = "_all"))  # Center-align the columns
),
class = "display"
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Read libraries
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
library(shinythemes)
# Read data
data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player),
width = "100%")  # Set the width of the dropdown to 100%
),
mainPanel(
tableOutput("player_table")
)
)
)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderTable({
selected_player() %>% select(Player, Year, Team) %>%
datatable(
options = list(
paging = FALSE,  # Disable pagination
searching = FALSE,  # Disable searching
info = FALSE,  # Disable information display
columnDefs = list(list(className = "dt-center", targets = "_all"))  # Center-align the columns
),
class = "display"
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderTable({
selected_player() %>% select(Player, Year, Team)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderDT({
selected_player() %>%
select(Player, Year, Team) %>%
datatable(
options = list(
dom = 't',  # Display only the table
paging = FALSE,  # Disable pagination
searching = FALSE,  # Disable searching
info = FALSE,  # Disable information display
columnDefs = list(list(className = "dt-center", targets = "_all"))  # Center-align the columns
)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Run the Shiny app
shinyApp(ui, server)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderDT({
datatable(
selected_player() %>%
select(Player, Year, Team),
options = list(
dom = 't',  # Display only the table
paging = FALSE,  # Disable pagination
searching = FALSE,  # Disable searching
info = TRUE,  # Disable information display
columnDefs = list(list(className = "dt-center", targets = "_all"))  # Center-align the columns
)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Read libraries
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
library(shinythemes)
# Read data
data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player),
width = "100%")  # Set the width of the dropdown to 100%
),
mainPanel(
tableOutput("player_table")
)
)
)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Show player's name and team for each year
output$player_table <- renderDT({
datatable(
selected_player() %>%
select(Player, Year, Team),
options = list(
dom = 't',  # Display only the table
paging = TRUE,  # Disable pagination
searching = TRUE,  # Disable searching
info = TRUE,  # Disable information display
columnDefs = list(list(className = "dt-center", targets = "_all"))  # Center-align the columns
)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Read libraries
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
library(shinythemes)
# Read data
data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
theme = shinytheme("flatly"),  # Applying the "flatly" theme for a better visual appeal
tags$head(
tags$style(
HTML(
"
.player-square {
background-color: #EDEDED;
border-radius: 8px;
padding: 20px;
text-align: center;
font-size: 24px;
font-weight: bold;
margin-bottom: 20px;
}
.year-team-section {
background-color: #F5F5F5;
border-radius: 8px;
padding: 20px;
text-align: center;
font-size: 18px;
margin-bottom: 20px;
}
"
)
)
),
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player),
width = "100%")  # Set the width of the dropdown to 100%
),
mainPanel(
div(class = "player-square",
textOutput("player_name")),
div(class = "year-team-section",
textOutput("year_team"))
)
)
)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player)
})
# Display player's name
output$player_name <- renderText({
input$player
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_player()
paste("Year:", player_data$Year, " | Team:", player_data$Team)
})
}
# Run the Shiny app
shinyApp(ui, server)
View(data)
View(data)
# Read libraries
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
library(shinythemes)
# Read data
data <- read_csv("PlayerStatesTrajectory.csv")
# UI function
ui <- fluidPage(
theme = shinytheme("flatly"),  # Applying the "flatly" theme for a better visual appeal
tags$head(
tags$style(
HTML(
"
.player-square {
background-color: #EDEDED;
border-radius: 8px;
padding: 20px;
text-align: center;
font-size: 24px;
font-weight: bold;
margin-bottom: 20px;
}
.year-team-section {
background-color: #F5F5F5;
border-radius: 8px;
padding: 20px;
text-align: center;
font-size: 18px;
margin-bottom: 20px;
}
"
)
)
),
titlePanel("League of Legends Player Stats"),
sidebarLayout(
sidebarPanel(
selectInput("player", "Select Player:", choices = unique(data$Player),
width = "100%")  # Set the width of the dropdown to 100%
),
mainPanel(
div(class = "player-square",
textOutput("player_name")),
div(class = "year-team-section",
textOutput("year_team"))
)
)
)
# Server function
server <- function(input, output) {
# Filter data based on selected player
selected_player <- reactive({
filter(data, Player == input$player) %>% slice(1)
})
# Display player's name
output$player_name <- renderText({
input$player
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_player()
paste("Year:", player_data$Year, " | Team:", player_data$Team)
})
}
# Run the Shiny app
shinyApp(ui, server)
