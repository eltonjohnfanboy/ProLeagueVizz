ggplot(fo_df) + aes(long, lat, group = group, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group) + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
View(fo_df)
View(fo_df)
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "blue") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
library(reshape2)
library(ggplot2)
library(lubridate)
tasks <- c("Review literature", "Mung data", "Stats analysis", "Write Report")
data <- data_lec %>% filter(Player == "113" & Year == "2023")
setwd("C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/Data")
data_lec <- read_csv("PlayerStatesTrajectory.csv")
library(reshape2)
library(ggplot2)
library(lubridate)
data_lec <- read_csv("PlayerStatesTrajectory.csv")
library(dplyr)
data_lec <- read_csv("PlayerStatesTrajectory.csv")
install.packages("readr")
library(readr)
tasks <- c("Review literature", "Mung data", "Stats analysis", "Write Report")
data_lec <- read_csv("PlayerStatesTrajectory.csv")
View(data_lec)
View(data_lec)
data_lec <- read_csv("PlayerStatsConvDates.csv")
View(data_lec)
View(data_lec)
data_lec$converted_dates <- as.Date(data_lec$converted_dates, format = '%Y-%m-%d')
View(data_lec)
View(data_lec)
data_lec <- read_csv("PlayerStatsConvDates.csv")
data_lec$converted_dates <- as.Date(data_lec$converted_dates, format = '%Y-%m-%d')
data_lec <- read_csv("PlayerStatsConvDates.csv")
data_lec$converted_dates <- as.Date(data_lec$converted_dates, format = '%Y-%m-%d')
data_lec <- read_csv("PlayerStatsConvDates.csv")
data_lec$converted_dates
data_lec$converted_dates[0]
data_lec$converted_dates[1]
as.Date(data_lec$converted_dates[1])
data_lec <- read_csv("PlayerStatsConvDates.csv")
View(data_lec)
View(data_lec)
data_lec$converted_dates
data_lec$converted_dates[1]
library(reshape2)
library(ggplot2)
library(lubridate)
library(dplyr)
library(readr)
data_lec <- read_csv("PlayersTrajectoyData.csv")
View(data_lec)
View(data_lec)
data_lec$start_date
c(data_lec$start_date)
as.Date(c(data_lec$start_date))
as.Date(c("2010-08-24", "2010-10-01", "2010-11-01", "2011-02-14"))
factor(c(data_lec$`Teams trajectory`,  levels = data_lec$`Teams trajectory`))
tasks <- c("Review literature", "Mung data", "Stats analysis", "Write Report")
data_lec <- read_csv("PlayersTrajectoyData.csv")
data <- data_lec %>% filter(Player == "113" & Year == "2023")
factor(c(data$`Teams trajectory`,  levels = data$`Teams trajectory`))
data
data_aux <- data_lec %>% filter(Player == "113" & Year == "2023")
data_aux <- data_lec %>% filter(Player == "113" & Year == "2023")
data_aux <- data_lec %>% filter(Player == "113")
View(data_aux)
View(data_aux)
as.Date(c(data_aux$start_date))
factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`))
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
is.critical = c(TRUE, FALSE, FALSE, TRUE)
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name, colour = is.critical)) +
geom_line(size = 6) +
xlab(NULL) +
ylab(NULL)
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6) +
xlab(NULL) +
ylab(NULL)
ggplot(mdfr, aes(value, name, colour = "skyblue")) +
geom_line(size = 6) +
xlab(NULL) +
ylab(NULL)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name, fill = "skyblue")) +
geom_line(size = 6) +
xlab(NULL) +
ylab(NULL)
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
View(dfr)
View(dfr)
View(data_aux)
View(data_aux)
mdfr <- melt(data_aux, measure.vars = c("start.date", "end.date"))
mdfr <- melt(data_aux, measure.vars = c("start_date", "end_date"))
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
ggplot(mdfr, aes(value, Player)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
# Read libraries
library(shiny)
library(shinythemes)
library(reshape2)
library(ggplot2)
library(lubridate)
library(dplyr)
library(readr)
# Read data
data_lec <- read_csv("PlayerStatesTrajectory.csv")
# Define ui
ui <- fluidPage(theme = shinytheme("superhero"),
navbarPage(
"LeagueStats",
tabPanel("Player stats",
sidebarPanel(
tags$h3("Search Bar"),
selectInput("player", "Select Player:", choices = unique(data_lec$Player),
width = "100%"),
uiOutput("yearSelection")
),
mainPanel(
textOutput("player_name"),
textOutput("year_team")
),
mainPanel(
plotOutput("trajectoryPlot")
)
),
tabPanel("Team stats", "Under construction ðŸ‘·"),
tabPanel("Team comparison", "Under construction ðŸ‘·")
) # navbar page
) #fluidpage
server <- function(input, output, session){
selected_player <- reactive({
filter(data_lec, Player == input$player)
})
output$yearSelection <- renderUI({selectInput("year", "Select Year:", choices = unique(selected_player()$Year),
width = "100%")})
selected_data <- reactive({
filter(data_lec, Player == input$player & Year == input$year)
})
# Display player's name
output$player_name <- renderText({
player_data <- selected_data()
paste("Official name: ", unique(player_data$Player))
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_data()
mean_kda <- mean(player_data$KDA)
paste("Year:", unique(player_data$Year), " | KDA:", mean_kda)
})
# Display trajectory plot
output$trajectoryPlot <- renderPlot({
data_traj <- read_csv("PlayersTrajectoyData.csv")
data_aux <- data_lec %>% filter(Player == input$Player)
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
})
}
# Run the Shiny app
shinyApp(ui, server)
server <- function(input, output, session){
selected_player <- reactive({
filter(data_lec, Player == input$player)
})
output$yearSelection <- renderUI({selectInput("year", "Select Year:", choices = unique(selected_player()$Year),
width = "100%")})
selected_data <- reactive({
filter(data_lec, Player == input$player & Year == input$year)
})
# Display player's name
output$player_name <- renderText({
player_data <- selected_data()
paste("Official name: ", unique(player_data$Player))
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_data()
mean_kda <- mean(player_data$KDA)
paste("Year:", unique(player_data$Year), " | KDA:", mean_kda)
})
# Display trajectory plot
output$trajectoryPlot <- renderPlot({
player_data <- selected_data()
data_traj <- read_csv("PlayersTrajectoyData.csv")
data_aux <- data_lec %>% filter(Player == unique(player_data$Player))
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
})
}
# Run the Shiny app
shinyApp(ui, server)
server <- function(input, output, session){
selected_player <- reactive({
filter(data_lec, Player == input$player)
})
output$yearSelection <- renderUI({selectInput("year", "Select Year:", choices = unique(selected_player()$Year),
width = "100%")})
selected_data <- reactive({
filter(data_lec, Player == input$player & Year == input$year)
})
# Display player's name
output$player_name <- renderText({
player_data <- selected_data()
paste("Official name: ", unique(player_data$Player))
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_data()
mean_kda <- mean(player_data$KDA)
paste("Year:", unique(player_data$Year), " | KDA:", mean_kda)
})
# Display trajectory plot
output$trajectoryPlot <- renderPlot({
player_data <- selected_data()
data_traj <- read_csv("PlayersTrajectoyData.csv")
data_aux <- data_traj %>% filter(Player == unique(player_data$Player))
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
})
}
# Run the Shiny app
shinyApp(ui, server)
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
server <- function(input, output, session){
selected_player <- reactive({
filter(data_lec, Player == input$player)
})
output$yearSelection <- renderUI({selectInput("year", "Select Year:", choices = unique(selected_player()$Year),
width = "100%")})
selected_data <- reactive({
filter(data_lec, Player == input$player & Year == input$year)
})
# Display player's name
output$player_name <- renderText({
player_data <- selected_data()
paste("Official name: ", unique(player_data$Player))
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_data()
mean_kda <- mean(player_data$KDA)
paste("Year:", unique(player_data$Year), " | KDA:", mean_kda)
})
# Display trajectory plot
output$trajectoryPlot <- renderPlot({
player_data <- selected_data()
data_traj <- read_csv("PlayersTrajectoyData.csv")
print(unique(player_data$Player))
data_aux <- data_traj %>% filter(Player == unique(player_data$Player))
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Read data
data_lec <- read_csv("PlayerStatesTrajectory.csv")
data_traj <- read_csv("PlayersTrajectoyData.csv")
View(data_traj)
View(data_traj)
library (plotly)
# Read data
data_lec <- read_csv("PlayerStatesTrajectory.csv")
# Read libraries
library(shiny)
library(shinythemes)
library(reshape2)
library(ggplot2)
library(lubridate)
library(dplyr)
library(readr)
library (plotly)
# Read data
data_lec <- read_csv("PlayerStatesTrajectory.csv")
data_traj <- read_csv("PlayersTrajectoyData.csv")
# Define ui
ui <- fluidPage(theme = shinytheme("superhero"),
navbarPage(
"LeagueStats",
tabPanel("Player stats",
sidebarPanel(
tags$h3("Search Bar"),
selectInput("player", "Select Player:", choices = unique(data_lec$Player),
width = "100%"),
uiOutput("yearSelection")
),
mainPanel(
textOutput("player_name"),
textOutput("year_team")
),
mainPanel(
plotOutput("trajectoryPlot")
)
),
tabPanel("Team stats", "Under construction ðŸ‘·"),
tabPanel("Team comparison", "Under construction ðŸ‘·")
) # navbar page
) #fluidpage
server <- function(input, output, session){
selected_player <- reactive({
filter(data_lec, Player == input$player)
})
output$yearSelection <- renderUI({selectInput("year", "Select Year:", choices = unique(selected_player()$Year),
width = "100%")})
selected_data <- reactive({
filter(data_lec, Player == input$player & Year == input$year)
})
# Display player's name
output$player_name <- renderText({
player_data <- selected_data()
paste("Official name: ", unique(player_data$Player))
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_data()
mean_kda <- mean(player_data$KDA)
paste("Year:", unique(player_data$Year), " | KDA:", mean_kda)
})
# Display trajectory plot
output$trajectoryPlot <- renderPlotly({
data_aux <- data_traj %>% filter(Player == input$player)
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
plot_traj <- ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
ggplotly(plot_traj)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Run the Shiny app
shinyApp(ui, server)
server <- function(input, output, session){
selected_player <- reactive({
filter(data_lec, Player == input$player)
})
output$yearSelection <- renderUI({selectInput("year", "Select Year:", choices = unique(selected_player()$Year),
width = "100%")})
selected_data <- reactive({
filter(data_lec, Player == input$player & Year == input$year)
})
# Display player's name
output$player_name <- renderText({
player_data <- selected_data()
paste("Official name: ", unique(player_data$Player))
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_data()
mean_kda <- mean(player_data$KDA)
paste("Year:", unique(player_data$Year), " | KDA:", mean_kda)
})
# Display trajectory plot
# output$trajectoryPlot <- renderPlotly({
#   data_aux <- data_traj %>% filter(Player == input$player)
#   dfr <- data.frame(
#     name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
#     start.date  = as.Date(c(data_aux$start_date)),
#     end.date    = as.Date(c(data_aux$end_date)),
#   )
#   mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
#   plot_traj <- ggplot(mdfr, aes(value, name)) +
#     geom_line(size = 6, colour = "skyblue") +
#     xlab(NULL) +
#     ylab(NULL)
#   ggplotly(plot_traj)
#})
}
# Run the Shiny app
shinyApp(ui, server)
server <- function(input, output, session){
selected_player <- reactive({
filter(data_lec, Player == input$player)
})
output$yearSelection <- renderUI({selectInput("year", "Select Year:", choices = unique(selected_player()$Year),
width = "100%")})
selected_data <- reactive({
filter(data_lec, Player == input$player & Year == input$year)
})
# Display player's name
output$player_name <- renderText({
player_data <- selected_data()
paste("Official name: ", unique(player_data$Player))
})
# Display year and team information
output$year_team <- renderText({
player_data <- selected_data()
mean_kda <- mean(player_data$KDA)
paste("Year:", unique(player_data$Year), " | KDA:", mean_kda)
})
# Display trajectory plot
output$trajectoryPlot <- renderPlotly({
data_aux <- data_traj %>% filter(Player == input$player)
dfr <- data.frame(
name        = factor(c(data_aux$`Teams trajectory`,  levels = data_aux$`Teams trajectory`)),
start.date  = as.Date(c(data_aux$start_date)),
end.date    = as.Date(c(data_aux$end_date)),
)
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
plot_traj <- ggplot(mdfr, aes(value, name)) +
geom_line(size = 6, colour = "skyblue") +
xlab(NULL) +
ylab(NULL)
ggplotly(plot_traj)
})
}
# Run the Shiny app
shinyApp(ui, server)
