),
shadow = list(enabled = TRUE, size = 10)
) %>%
visEdges(
color = list(color = "#0085AF", highlight = "#C62F4B")
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE)
) %>%
visLayout(randomSeed = 11)
})
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample nodes data
nodes <- data.frame(id = 1:6, label = c("A", "B", "C", "D", "E", "F"))
# Sample edges data with weights
edges <- data.frame(from = c(1, 1, 2, 2, 3, 4), to = c(2, 3, 3, 4, 4, 5), weight = c(3, 1, 2, 4, 2, 5))
# Sample player-champion association
playerChampion <- data.frame(player = c("Player 1", "Player 2"), champion = c("A", "D"))
ui <- fluidPage(
titlePanel("Player Network Visualization"),
selectInput("playerSelect", "Select Player:", choices = unique(playerChampion$player)),
visNetworkOutput("networkPlot")
)
server <- function(input, output) {
observe({
selectedPlayer <- input$playerSelect
# Filter nodes to highlight for the selected player's champions
highlightedNodes <- nodes$id[nodes$label %in% playerChampion$champion[playerChampion$player == selectedPlayer]]
# Create a vector of border colors based on node highlighting
borderColors <- ifelse(nodes$id %in% highlightedNodes, "#FF8000", "#013848")
# Update the network plot with highlighted nodes
output$networkPlot <- renderVisNetwork({
visNetwork(nodes, edges, width = "100%") %>%
visIgraphLayout() %>%
visNodes(
borderWidth = ifelse(nodes$id %in% highlightedNodes, 5, 1),
color = list(
background = "#0085AF",
border = borderColors,
highlight = "#FF8000"
),
shadow = list(enabled = TRUE, size = 10)
) %>%
visEdges(
color = list(color = "#0085AF", highlight = "#C62F4B")
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE)
) %>%
visLayout(randomSeed = 11)
})
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample fixed nodes data
fixed_nodes <- data.frame(id = 1:10, label = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"))
# Sample edges data with weights
edges <- data.frame(from = c(1, 1, 2, 2, 3, 4), to = c(2, 3, 3, 4, 4, 5), weight = c(3, 1, 2, 4, 2, 5))
# Sample player-champion association
playerChampion <- data.frame(player = c("Player 1", "Player 2"), champion = c("A", "D"))
ui <- fluidPage(
titlePanel("Player Network Visualization"),
selectInput("playerSelect", "Select Player:", choices = unique(playerChampion$player)),
visNetworkOutput("networkPlot")
)
server <- function(input, output) {
observe({
selectedPlayer <- input$playerSelect
# Get the champions associated with the selected player
playerChamps <- playerChampion$champion[playerChampion$player == selectedPlayer]
# Filter nodes to highlight for the selected player's champions
highlightedNodes <- fixed_nodes$id[fixed_nodes$label %in% playerChamps]
# Filter edges to include only those connected to the highlighted nodes
filtered_edges <- edges[edges$from %in% highlightedNodes | edges$to %in% highlightedNodes, ]
# Update the network plot with highlighted nodes and edges
output$networkPlot <- renderVisNetwork({
visNetwork(fixed_nodes, filtered_edges, width = "100%") %>%
visIgraphLayout() %>%
visNodes(
borderWidth = ifelse(id %in% highlightedNodes, 5, 1),
color = list(
background = "#0085AF",
border = ifelse(id %in% highlightedNodes, "#FF8000", "#013848"),
highlight = "#FF8000"
),
shadow = list(enabled = TRUE, size = 10)
) %>%
visEdges(
color = list(color = "#0085AF", highlight = "#C62F4B")
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE)
) %>%
visLayout(randomSeed = 11)
})
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample fixed nodes data
fixed_nodes <- data.frame(id = 1:10, label = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"))
# Sample edges data with weights
edges <- data.frame(from = c(1, 1, 2, 2, 3, 4), to = c(2, 3, 3, 4, 4, 5), weight = c(3, 1, 2, 4, 2, 5))
# Sample player-champion association
playerChampion <- data.frame(player = c("Player 1", "Player 2"), champion = c("A", "D"))
ui <- fluidPage(
titlePanel("Player Network Visualization"),
selectInput("playerSelect", "Select Player:", choices = unique(playerChampion$player)),
visNetworkOutput("networkPlot")
)
server <- function(input, output) {
observe({
selectedPlayer <- input$playerSelect
# Get the champions associated with the selected player
playerChamps <- playerChampion$champion[playerChampion$player == selectedPlayer]
# Filter nodes to highlight for the selected player's champions
highlightedNodes <- fixed_nodes$id[fixed_nodes$label %in% playerChamps]
# Filter edges to include only those connected to the highlighted nodes
filtered_edges <- edges[edges$from %in% highlightedNodes | edges$to %in% highlightedNodes, ]
# Update the network plot with highlighted nodes and edges
output$networkPlot <- renderVisNetwork({
visNetwork(nodes = fixed_nodes, edges = filtered_edges, width = "100%") %>%
visIgraphLayout() %>%
visNodes(
borderWidth = ifelse(id %in% highlightedNodes, 5, 1),
color = list(
background = "#0085AF",
border = ifelse(id %in% highlightedNodes, "#FF8000", "#013848"),
highlight = "#FF8000"
),
shadow = list(enabled = TRUE, size = 10)
) %>%
visEdges(
color = list(color = "#0085AF", highlight = "#C62F4B")
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE)
) %>%
visLayout(randomSeed = 11)
})
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample fixed nodes data
fixed_nodes <- data.frame(id = 1:10, label = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"))
# Sample edges data with weights
edges <- data.frame(from = c(1, 1, 2, 2, 3, 4), to = c(2, 3, 3, 4, 4, 5), weight = c(3, 1, 2, 4, 2, 5))
# Sample player-champion association
playerChampion <- data.frame(player = c("Player 1", "Player 2"), champion = c("A", "D"))
ui <- fluidPage(
titlePanel("Player Network Visualization"),
selectInput("playerSelect", "Select Player:", choices = unique(playerChampion$player)),
visNetworkOutput("networkPlot")
)
server <- function(input, output) {
observe({
selectedPlayer <- input$playerSelect
# Get the champions associated with the selected player
playerChamps <- playerChampion$champion[playerChampion$player == selectedPlayer]
# Filter nodes to highlight for the selected player's champions
highlightedNodes <- fixed_nodes$id[fixed_nodes$label %in% playerChamps]
# Filter edges to include only those connected to the highlighted nodes
filtered_edges <- edges[(edges$from %in% highlightedNodes) | (edges$to %in% highlightedNodes), ]
# Update the network plot with highlighted nodes and edges
output$networkPlot <- renderVisNetwork({
visNetwork(nodes = fixed_nodes, edges = filtered_edges, width = "100%") %>%
visIgraphLayout() %>%
visNodes(
borderWidth = ifelse(id %in% highlightedNodes, 5, 1),
color = list(
background = "#0085AF",
border = ifelse(id %in% highlightedNodes, "#FF8000", "#013848"),
highlight = "#FF8000"
),
shadow = list(enabled = TRUE, size = 10)
) %>%
visEdges(
color = list(color = "#0085AF", highlight = "#C62F4B")
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE)
) %>%
visLayout(randomSeed = 11)
})
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample fixed nodes data
fixed_nodes <- data.frame(id = 1:10, label = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J"))
# Sample edges data with weights
edges <- data.frame(from = c(1, 1, 2, 2, 3, 4), to = c(2, 3, 3, 4, 4, 5), weight = c(3, 1, 2, 4, 2, 5))
# Sample player-champion association
playerChampion <- data.frame(player = c("Player 1", "Player 2"), champion = c("A", "D"))
ui <- fluidPage(
titlePanel("Player Network Visualization"),
selectInput("playerSelect", "Select Player:", choices = unique(playerChampion$player)),
visNetworkOutput("networkPlot")
)
server <- function(input, output) {
observe({
selectedPlayer <- input$playerSelect
# Get the champions associated with the selected player
playerChamps <- playerChampion$champion[playerChampion$player == selectedPlayer]
# Filter nodes to highlight for the selected player's champions
highlightedNodes <- fixed_nodes$id[fixed_nodes$label %in% playerChamps]
# Filter edges to include only those connected to the highlighted nodes
filtered_edges <- edges[edges$from %in% highlightedNodes | edges$to %in% highlightedNodes, ]
# Update the network plot with highlighted nodes and edges
output$networkPlot <- renderVisNetwork({
visNetwork(nodes = fixed_nodes, edges = filtered_edges, width = "100%") %>%
visIgraphLayout() %>%
visNodes(
borderWidth = ifelse(id %in% highlightedNodes, 5, 1),
color = list(
background = "#0085AF",
border = ifelse(id %in% highlightedNodes, "#FF8000", "#013848"),
highlight = "#FF8000"
),
shadow = list(enabled = TRUE, size = 10)
) %>%
visEdges(
color = list(color = "#0085AF", highlight = "#C62F4B")
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE)
) %>%
visLayout(randomSeed = 11)
})
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
# Define a reactive expression to handle node size and color updates
highlighted_nodes <- reactive({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
highlighted <- nodes$id %in% selected_player
nodes$size <- ifelse(highlighted, 30, 15)
nodes$color <- ifelse(highlighted, "red", "blue")
}
nodes
})
observe({
visNetworkProxy("network") %>%
visNodes(data = highlighted_nodes())
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
# Define a reactive expression to handle node size and color updates
highlighted_nodes <- reactive({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
highlighted <- nodes$id %in% selected_player
nodes$size <- ifelse(highlighted, 30, 15)
nodes$color <- ifelse(highlighted, "red", "blue")
}
nodes
})
observe({
proxy <- visNetworkProxy("network")
proxy %>% visNodes(update = highlighted_nodes())
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
# Define a reactive expression to handle node size and color updates
highlighted_nodes <- reactive({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
highlighted <- nodes$id %in% selected_player
nodes$size[highlighted] <- 30
nodes$size[!highlighted] <- 15
nodes$color[highlighted] <- "red"
nodes$color[!highlighted] <- "blue"
}
nodes
})
observe({
proxy <- visNetworkProxy("network")
proxy %>% visNodes(nodes = highlighted_nodes())
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
observe({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
highlighted <- nodes$id %in% selected_player
nodes$size <- ifelse(highlighted, 30, 15)
nodes$color <- ifelse(highlighted, "red", "blue")
}
visNetworkProxy("network") %>%
visNodes(nodes = nodes)
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
observe({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
highlighted <- nodes$id %in% selected_player
node_updates <- sprintf("nodes.update({id: %s, size: %s, color: '%s'});",
nodes$id[highlighted],
ifelse(highlighted, 30, 15),
ifelse(highlighted, "red", "blue"))
visNetworkProxy("network") %>%
visJSProxy("nodesHandler") %>%
visExecuteJS(node_updates)
}
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
observe({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
highlighted <- nodes$id %in% selected_player
updated_nodes <- nodes
updated_nodes$size[highlighted] <- 30
updated_nodes$color[highlighted] <- "red"
updated_nodes$size[!highlighted] <- 15
updated_nodes$color[!highlighted] <- "blue"
visNetworkProxy("network") %>%
visUpdateNodes(data = updated_nodes)
}
})
}
shinyApp(ui, server)
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/textAux.R')
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
observe({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
highlighted <- nodes$id %in% selected_player
updated_nodes <- nodes
updated_nodes$size[highlighted] <- 30
updated_nodes$color[highlighted] <- "red"
updated_nodes$size[!highlighted] <- 15
updated_nodes$color[!highlighted] <- "blue"
visNetworkProxy("network") %>%
visUpdateNodes(updated_nodes)
}
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
# Sample data: Player - Champ mapping
player_champs <- data.frame(player_id = 1:10, champ_id = sample(1:10, 10, replace = TRUE))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = 1:10),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
observe({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
player_champs_subset <- player_champs[player_champs$player_id == selected_player, ]
highlighted_nodes <- player_champs_subset$champ_id
nodes_subset <- nodes
nodes_subset$size <- ifelse(nodes_subset$id %in% highlighted_nodes, 30, 15)
nodes_subset$color <- ifelse(nodes_subset$id %in% highlighted_nodes, "red", "blue")
visNetworkProxy("network") %>%
visUpdateNodes(nodes_subset)
}
})
}
shinyApp(ui, server)
library(shiny)
library(visNetwork)
# Sample data: Nodes and edges
nodes <- data.frame(id = 1:10, label = paste("Node", 1:10))
edges <- data.frame(from = c(1, 1, 2, 3, 3, 4, 5, 6, 7), to = c(2, 3, 4, 5, 6, 7, 8, 9, 10))
# Sample data: Player - Champ mapping
player_champs <- data.frame(player_id = c(rep(1, 4), rep(2, 6)), champ_id = sample(1:10, 10, replace = TRUE))
ui <- fluidPage(
selectInput("selected_player", "Select a player:", choices = c(1, 2)),
visNetworkOutput("network")
)
server <- function(input, output, session) {
output$network <- renderVisNetwork({
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE)
})
observe({
selected_player <- input$selected_player
if (!is.null(selected_player)) {
player_champs_subset <- player_champs[player_champs$player_id == selected_player, ]
highlighted_nodes <- player_champs_subset$champ_id
nodes_subset <- nodes
nodes_subset$size <- ifelse(nodes_subset$id %in% highlighted_nodes, 30, 15)
nodes_subset$color <- ifelse(nodes_subset$id %in% highlighted_nodes, "red", "blue")
visNetworkProxy("network") %>%
visUpdateNodes(nodes_subset)
}
})
}
shinyApp(ui, server)
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/textAux.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/textAux.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/textAux.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/textAux.R')
