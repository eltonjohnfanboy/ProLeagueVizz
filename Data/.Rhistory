iris_pca<-prcomp(iris[,-5], center=TRUE, scale.=TRUE)
View(iris_pca)
View(iris_pca)
iris_pca
summary(iris_pca)
summary(iris_pca)
fviz_pca_ind(iris_pca, geom="point")
fviz_pca_ind(iris_pca, label="none", habillage=iris$Species)
fviz_pca_ind(iris_pca, label="none", habillage=iris$Species) # afegeix color i forma per cada espÃ¨cie
fviz_pca_ind(iris_pca, label="none",
habillage=iris$Species,
addEllipses=TRUE, ellipse.level=0.95) # afegir el.lipses
install.packages("treemapify")
Proglangs <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/proglanguages.csv")
View(Proglangs)
View(Proglangs)
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap()
library(treemapify)
Proglangs <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/proglanguages.csv")
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap()
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border()
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + +geom_treemap_subgroup_text(color='white')
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() +geom_treemap_subgroup_text(color='white')
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + geom_treemap_subgroup_text(color="white",place="left") + geom_treemap_text (aes(label=id))
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + geom_treemap_subgroup_text(color="white",place="left") + geom_treemap_text (aes(label=id))
ggplot(Proglangs, aes(area=value, fill=parent, label=id, subgroup=parent)) + geom_treemap() + geom_treemap_subgroup_border() + geom_treemap_subgroup_text(color="white",place="left") + geom_treemap_text (aes(label=id))
new2
mtxars
mtcars
glimpse(mtcars)
### PART 1
### Exercici 1
aux = mtcars
View(aux)
View(aux)
mtcars(c("mpg", "disp", "hp", "dart", "wt", "qsec"))
aux(c("mpg", "disp", "hp", "dart", "wt", "qsec"))
aux
aux("mpg", "disp", "hp", "dart", "wt", "qsec")
mtcars("mpg", "disp", "hp", "dart", "wt", "qsec")
aux("mpg", "disp", "hp", "dart", "wt", "qsec")
mtcars
as_tibble(mtcars)
library(devtools)
library(factoextra)
library(tidyverse)
library(dplyr)
library(forcats)
library(ggcorrplot)
as_tibble(mtcars)
aux("mpg", "disp", "hp", "dart", "wt", "qsec")
mtcars("mpg", "disp", "hp", "dart", "wt", "qsec")
as_tibble(mtcars)
as_tibble(mtcars)[c("mpg", "disp", "hp", "dart", "wt", "qsec")]
View(aux)
as_tibble(mtcars)[c("mpg", "disp", "hp", "drat", "wt", "qsec")]
as_tibble(mtcars)[c("mpg", "disp", "hp", "drat", "wt", "qsec", "cyl", "gear", "carb")]
#a
new_2 = as_tibble(mtcars)[c("mpg", "disp", "hp", "drat", "wt", "qsec", "cyl", "gear", "carb")]
#b
mtcars_pca = prcomp(new_2, center=TRUE, scale.=TRUE)
summary(mtcars_pca)
#b
mtcars_pca = prcomp(new_2, center=TRUE, scale.=TRUE)
install.packages (c("devtools", "stringr"))
install.packages (c ("maps", "mapdata","ggmap"))
install.packages("ozmaps")
devtools::install_github("mdsumner/ozmaps")
install.packages("sf")
install.packages("rmapshaper")
install.packages("rmapshaper")
install.packages("rmapshaper")
install.packages("rmapshaper")
usa <- mapdata("usa")
ggplot(usa) + aes(long, lat) + geom_point()
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
usa <- mapdata("usa")
install.packages (c("devtools", "stringr"))
install.packages (c("devtools", "stringr"))
install.packages(c("devtools", "stringr"))
install.packages (c ("maps", "mapdata","ggmap"))
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
usa <- mapdata("usa")
library(ggplot2)
library(ggmap)
library(mapdata)
usa <- mapdata(usa)
usa <- map_data(usa)
usa <- map_data("usa")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat) + geom_point()
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group) + geom_point() + coord_quickmap()
usa <- map_data("japan")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat, group = group) + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
usa <- map("japan")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
usa <- map_data("nz")
theme_set(theme_bw())
ggplot(usa) + aes(long, lat) + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill  = "white") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, colour  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white", colour  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white", colours  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white", colour  = "grey50") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "white") + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "red") + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat) + geom_point(fill = "red", colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "blue") + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "blue") + geom_point() + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = "blue", group = group) + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group) + geom_point(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = group, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
###2
states <- map_data("states")
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
usa <- map_data("usa")
theme_set(theme_bw())
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, fill = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region) + geom_polygon(colour  = "grey50") + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region) + geom_polygon() + coord_quickmap()
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
View(states)
View(states)
###2
states <- map_data("state")
ggplot(usa) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap()
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon() + coord_quickmap() + guides(fill = "none")
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon(colous = "white") + coord_quickmap() + guides(fill = "none")
ggplot(states) + aes(long, lat, group = region, fill = region) + geom_polygon(colour = "white") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, fill = "gray") + geom_polygon(colour = "blue") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group) + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, colour = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = group, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
View(fo_df)
View(fo_df)
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "red") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "blue") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region, fill = "gray") + geom_polygon(colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none")
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
CA_base <- ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
###3
fo_df <- subset(states, region == "florida") # estat de Florida
ggplot(fo_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
cali_df <- subset(states, region == "california") # estat de Florida
ggplot(cali_df) + aes(long, lat, group = region) + geom_polygon(fill = "gray", colour = "black") + coord_quickmap() + guides(fill = "none") + theme_nothing()
library(shiny)
ui <- fluidPage(
titlePanel("Accordion Example"),
# Wrap your accordion content inside the accordion function
shiny::accordion(
# Section 1
section(
"Section 1",
fluidRow(
# Add your content for Section 1 here
column(width = 6, plotOutput("plot1")),
column(width = 6, tableOutput("table1"))
)
),
# Section 2
section(
"Section 2",
fluidRow(
# Add your content for Section 2 here
column(width = 6, plotOutput("plot2")),
column(width = 6, tableOutput("table2"))
)
)
)
)
server <- function(input, output) {
# Define your server logic here (plotting, data processing, etc.)
output$plot1 <- renderPlot({
# Render the plot for Section 1
# ...
})
output$table1 <- renderTable({
# Render the table for Section 1
# ...
})
output$plot2 <- renderPlot({
# Render the plot for Section 2
# ...
})
output$table2 <- renderTable({
# Render the table for Section 2
# ...
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Accordion Example"),
# Wrap your accordion content inside the accordion function
shiny::accordion(
# Section 1
section(
"Section 1",
fluidRow(
# Add your content for Section 1 here
column(width = 6, plotOutput("plot1")),
column(width = 6, tableOutput("table1"))
)
),
# Section 2
section(
"Section 2",
fluidRow(
# Add your content for Section 2 here
column(width = 6, plotOutput("plot2")),
column(width = 6, tableOutput("table2"))
)
)
)
)
install.packages("shinyjs")
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
titlePanel("Expand and Collapse Example"),
actionButton("toggle_btn", "Toggle Content"),
div(
id = "expand_content",
style = "display: none;",
p("This is the hidden content that will be expanded when you click the button.")
)
)
server <- function(input, output) {
observeEvent(input$toggle_btn, {
toggle("expand_content")
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$style(HTML("
.expand-content {
max-height: 0;
transition: max-height 0.5s ease-out;
overflow: hidden;
}
.expanded {
max-height: 400px; /* Adjust this value to control the size of the expanded content */
}
"))
),
titlePanel("Expand and Collapse Example"),
actionButton("toggle_btn", "Toggle Content"),
div(
class = "expand-content",
id = "expand_content",
p("This is the hidden content that will be expanded when you click the button.")
)
)
server <- function(input, output) {
observeEvent(input$toggle_btn, {
runjs("$('.expand-content').toggleClass('expanded');")
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$style(HTML("
.expand-content {
max-height: 0;
overflow: hidden;
transition: max-height 0.5s ease-out;
}
.expanded {
max-height: 500px; /* Adjust this value to control the size of the expanded content */
margin: 20px 0;
}
#expand_wrapper {
display: flex;
align-items: center;
justify-content: center;
height: 100vh;
}
#expand_button {
background-color: #007BFF;
color: white;
border: none;
padding: 10px 20px;
border-radius: 5px;
font-size: 18px;
cursor: pointer;
outline: none;
}
"))
),
div(
id = "expand_wrapper",
div(
id = "expand_button",
"Click to Expand"
),
div(
class = "expand-content",
id = "expand_content",
p("This is the hidden content that will be expanded when you click the button.")
)
)
)
server <- function(input, output) {
observeEvent(input$expand_button, {
runjs("$('.expand-content').toggleClass('expanded');")
})
}
shinyApp(ui, server)
# Read libraries
library(shiny)
library(shinythemes)
library(reshape2)
library(ggplot2)
library(lubridate)
library(dplyr)
library(readr)
library(plotly)
library(bslib)
library(forcats)
library(ggridges)
library(viridis)
library(gridExtra)
library(shinyjs)
library(DT)
library(visNetwork)
# Set the working directory
setwd("C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/Data")
# Read data
data_lec <- read_csv("PlayerStats.csv")
data_indiv <- read_csv("PlayerStatsGeneral.csv")
data_traj <- read_csv("PlayersTrajectoyData.csv")
df_early_vision_aggr <- read_csv("PlayersGolggStats.csv")
df_trophies <- read_csv("PlayerTrophies.csv")
data_champ_sim <- read_csv("finalChampSimilarity.csv")
champ_pos <- read_csv("champPosition.csv")
cpool_players <- read_csv("PlayersChampPool.csv")
chosen_player = "Elyoya"
cpool_players
cpool_players$Player == chosen_player
cpool_players[cpool_players$Player == chosen_player]
cpool_players %>% filter(cpool_players$Player == chosen_player)
cpool_players %>% filter(Player == chosen_player & Event == "ALL")
cpool_players %>% filter(Player == chosen_player & Event == "ALL") %>% select(Champion)
cpool_players %>% filter(Player == chosen_player & Event == "ALL") %>% select(Champion)
aux <- cpool_players %>% filter(Player == chosen_player & Event == "ALL") %>% select(Champion)
aux
as.list(aux)
aux2 <- as.list(aux)
axu2
aux2
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
# Libraries ---------------------------------------------------------------
library(tidyverse)
library(shiny)
library(dplyr)
library(ggplot2)
library(shinythemes)
library(visNetwork)
library(geomnet)
library(igraph)
# Set the working directory
setwd("C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/Data")
# Read data
data_lec <- read_csv("finalChampSimilarity.csv")
champ_pos <- read_csv("champPosition.csv")
#Nodes
nodes <- as.data.frame(data_lec$Champion, data_lec$Champion)
colnames(nodes) <- c("label")
nodes$id <- nodes$label
champion_names <- data_lec$Champion
# Initialize an empty list to store edges
edges <- list()
# Iterate through each row of the matrix to create edges
for (i in 1:nrow(data_lec)) {
from_champion <- champion_names[i]
# Iterate through each champion column
for (j in 2:ncol(data_lec)) {
to_champion <- colnames(data_lec)[j]
width_value <- data_lec[i, j]
# Create an edge and append to the list
edge <- c(from_champion, to_champion, width_value)
edges <- c(edges, list(edge))
}
}
# Convert the list of edges into a data frame
edges_df <- do.call(rbind, edges)
# Set column names
colnames(edges_df) <- c("from", "to", "width")
#Create graph for Louvain
edges_df <- as.data.frame(edges_df)
nodes <- left_join(nodes, champ_pos, by = "label")
colnames(nodes)[3] <- "group"
# Create a visNetwork graph
filtered_edges <- edges_df[edges_df$width > 0.85, ]
filtered_edges$from <- as.character(filtered_edges$from)
filtered_edges$to <- as.character(filtered_edges$to)
filtered_edges <- filtered_edges[filtered_edges$from != filtered_edges$to, , drop = FALSE]
nodes
nodes_to_highlight = c("Udyr", "Zyra")
nodes_to_highlight
ifelse(nodes$id %in% nodes_to_highlight, 50, 25)
nodes_to_highlight = c("Udyr", "Zyra", "Rumble", "Morgana", "Olaf")
ifelse(nodes$id %in% nodes_to_highlight, 50, 25)
nodes$size <- ifelse(nodes$id %in% nodes_to_highlight, 50, 25)
nodes$size
nodes$id
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
ifelse(aux_nodes$id %in% nodes_to_highlight, 99, 25)
ifelse(nodes$id %in% nodes_to_highlight, 99, 25)
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
nodes_to_highlight
print(nodes_to_highlight)
print(type(nodes_to_highlight))
print(class(nodes_to_highlight))
nodes_to_highlight(0)
nodes_to_highlight[1]
nodes_to_highlight[2]
nodse
nodes
print(class(nodes))
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
nodes_to_highlight
ifelse(nodes$id %in% nodes_to_highlight, 99, 25)
ifelse(nodes$id %in% as.list(nodes_to_highlight), 99, 25)
nth <- as.list(nodes_to_highlight)
ntr
nth
ifelse(nodes$id %in% as.list(nth), 99, 25)
ifelse(nodes$id %in% as.list(nth), 99999, 25)
ifelse(nodes$id %in% as.list(nth), 1, 25)
ifelse(nodes$id %in% nth, 1, 25)
ifelse(nodes$id %in% nth, 10, 25)
print(class(ntg))
print(class(nth))
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
runApp('C:/Users/adars/OneDrive/Escritorio/ProjecteLolShiny/App/app_v2.R')
